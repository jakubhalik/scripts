# Might have to write something else instead of nvme0n1ps depending on the desktop hardware
# Repetition regarding installs or similarities is to always see the logs explicitly for that very package
# Y/y/YES/yes/enter to all pacman installs
# If pacman command does not work put a sudo before it, I sometimes wrote it with it before, sometimes without it below in the instructions
# Just after downloading the .iso and the .sig before starting the arch installation
pacman-key --init
pacman-key --populate archlinux
gpg --keyserver-options auto-key-retrieve --verify archlinux-2024.05.01-x86_64.iso.sig
sudo umount /dev/sdb1
cd path_to_arch_iso
sudo dd if=archlinux-2024.05.01-x86_64.iso of=/dev/sdb1 bs=4M status=progress oflag=sync
# After starting the arch installation
cat /sys/firmware/fw_platform_size OR cat/sys/firmware/efi/fw_platform_size
# If the command returns 64, then system is booted in UEFI mode and has a 64-bit x64 UEFI. If the command returns 32, then system is booted in UEFI mode and has a 32-bit IA32 UEFI; while this is supported, it will limit the boot loader choice to systemd-boot and GRUB. If the file does not exist, the system may be booted in BIOS (or CSM) mode. If the system did not boot in the mode you desired (UEFI vs BIOS), refer to your motherboard's manual.
# Boot in UEFI, not in legacy mode
ls /sys/firmware/efi
ip addr show
lsblk
fdisk /dev/nvme0n1
    p
        g
    n
        1 (default)
            (default)
            +1G
                Y
    n
        2 (default)
            (default)
            +2G
                Y
    n
        3 (default)
            (default)
            (default)
    t
        3 
        44
    p
        w
mkfs.fat -F32 /dev/nvme0n1p1
mkfs.ext4 /dev/nvme0n1p2
cryptsetup luksFormat /dev/nvme0n1p3
    YES
        password
        password
cryptsetup open --type luks /dev/nvme0n1p3 lvm
    password
pvcreate /dev/mapper/lvm
vgcreate volgroup0 /dev/mapper/lvm
lvcreate -L {size for the logical volume, if I had 460G for nvme0n1p I would give this one 100GB, but 30GB is often more than enough here, unless bloated JS packages haha) volgroup0 -n lv_root
lvcreate -L {here just the rest of what u got bro} volgroup0 -n lv_home
vgdisplay
lvdisplay
modprobe dm_mod
vgscan
vgchange -ay
mkfs.ext4 /dev/volgroup0/lv_root
mkfs.ext4 /dev/volgroup0/lv_home
mount /dev/volgroup0/lv_root /mnt
mkdir -p /mnt/boot
mount /dev/nvme0n1p2 /mnt/boot
df -h | grep /mnt/boot
mkdir /mnt/home
mount /dev/volgroup0/lv_home /mnt/home
pacstrap -i /mnt base
    Y
# Should be done automatically by the pacstrap
mkdir -p /mnt/etc
# Should be done automatically by the pacstrap
genfstab -U -p /mnt >> /mnt/etc/fstab
cat /mnt/etc/fstab
arch-chroot /mnt
# If the chrooting does not work rerun pacstrap, if it still does not run the commands before pinata comment and then run chroot command again
mkdir -p /mnt/proc /mnt/sys /mnt/dev /mnt/run
mount --types proc /proc /mnt/proc
mount --rbind /sys /mnt/sys
mount --rbind /dev /mnt/dev
mount --rbind /run /mnt/run
# pinata
passwd
    password
    password
useradd -m -g users -G wheel x
passwd x
    password
    password
pacman-key --init
pacman-key --populate archlinux
pacman-key --refresh-keys
pacman -S sudo
pacman -S base-devel
pacman -S dosfstools
pacman -S grub
pacman -S lvm2
pacman -S mtools
pacman -S vim
pacman -S neovim
pacman -S networkmanager
pacman -S openssh
pacman -S linux
pacman -S linux-headers
pacman -S linux-lts
pacman -S linux-lts-headers
pacman -S linux-firmware
lspci
pacman -S the appropriate driver for your GPU/what you have for graphics
(If thinkpad T430: pacman -S xf86-video-intel)
pacman -S mesa
pacman -S libva-mesa-driver
nvim /etc/mkinitcpio.conf
    add encrypt lvm2 between block and filesystems in HOOKS
mkinitcpio -p linux
mkinitcpio -p linux-lts
nvim /etc/locale.gen
    en_US.UTF-8 UTF-8
locale-gen
pacman -S efibootmgr
nvim /etc/default/grub
# The only things you will probably have to actually change in grub file is the GRUB_CMDLINE_DEFAULT and uncommenting the GRUB_ENABLE_CRYPTODISK=y line
    # GRUB boot loader configuration
        GRUB_DEFAULT=0
        GRUB_TIMEOUT=5
        GRUB_DISTRIBUTOR="Arch"
        GRUB_CMDLINE_LINUX_DEFAULT="loglevel=7 cryptdevice=/dev/nvme0n1p3:volgroup0"
        GRUB_CMDLINE_LINUX=""
        # Preload both GPT and MBR modules so that they are not missed
        GRUB_PRELOAD_MODULES="part_gpt part_msdos"
        # Uncomment to enable booting from LUKS encrypted devices
        # GRUB_ENABLE_CRYPTODISK=y
        # Set to 'countdown' or 'hidden' to change timeout behavior,
        # press ESC key to display menu.
        GRUB_TIMEOUT_STYLE=menu
        # Uncomment to use basic console
        GRUB_TERMINAL_INPUT=console
        # Uncomment to disable graphical terminal
        #GRUB_TERMINAL_OUTPUT=console
        # The resolution used on graphical terminal
        # note that you can use only modes which your graphic card supports via VBE
        # you can see them in real GRUB with the command `videoinfo'
        GRUB_GFXMODE=auto
        # Uncomment to allow the kernel use the same resolution used by grub
        GRUB_GFXPAYLOAD_LINUX=keep
        # Uncomment if you want GRUB to pass to the Linux kernel the old parameter
        # format "root=/dev/xxx" instead of "root=/dev/disk/by-uuid/xxx"
        #GRUB_DISABLE_LINUX_UUID=true
        # Uncomment to disable generation of recovery mode menu entries
        GRUB_DISABLE_RECOVERY=true
        # Uncomment and set to the desired menu colors.  Used by normal and wallpaper
        # modes only.  Entries specified as foreground/background.
        #GRUB_COLOR_NORMAL="light-blue/black"
        #GRUB_COLOR_HIGHLIGHT="light-cyan/blue"
        # Uncomment one of them for the gfx desired, a image background or a gfxtheme
        #GRUB_BACKGROUND="/path/to/wallpaper"
        #GRUB_THEME="/path/to/gfxtheme"
        # Uncomment to get a beep at GRUB start
        #GRUB_INIT_TUNE="480 440 1"
        # Uncomment to make GRUB remember the last selection. This requires
        # setting 'GRUB_DEFAULT=saved' above.
        #GRUB_SAVEDEFAULT=true
        # Uncomment to disable submenus in boot menu
        #GRUB_DISABLE_SUBMENU=y
        # Probing for other operating systems is disabled for security reasons. Read
        # documentation on GRUB_DISABLE_OS_PROBER, if still want to enable this
        # functionality install os-prober and uncomment to detect and include other
        # operating systems.
        #GRUB_DISABLE_OS_PROBER=false
mkdir /boot/EFI
mount /dev/nvme0n1p1 /boot/EFI
grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck
cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo
grub-mkconfig -o /boot/grub/grub.cfg
pacman -S gdm
systemctl enable gdm
systemctl enable NetworkManager
(If you want to) systemctl enable sshd
exit
umount -a OR umount -R /mnt
ignore errors (unless way too unusual)
reboot/systemctl reboot/sudo systemctl reboot
sudo pacman -S git
sudo pacman -S alsa-utils
mkdir -p .local/src
cd .local/src
git clone https://github.com/bugswriter/dwm.git
git clone https://github.com/bugswriter/dmenu.git
git clone https://github.com/bugswriter/st.git
ls
cd dwm
sudo make clean install
sudo pacman -S libx11 libxft libxinerama dmenu
sudo make clean install
..
cd st
sudo make clean install
..
cd dmenu
sudo make clean install
sudo pacman -S xcompmgr
sudo pacman -S ttf-font-awesome
sudo pacman -S xsel
sudo pacman -S xwallpaper
git clone https://aur.archlinux.org/yay.git
cd yay
pacman -S go
makepkg -si
sudo pacman -S python-pywal
cp /etc/x11/xinit/xinitrc ~/.xinitrc
nvim .xinitrc
#!/bin/sh
    userresources=$HOME/.Xresources
    usermodmap=$HOME/.Xmodmap
    sysresources=/etc/X11/xinit/.Xresources
    sysmodmap=/etc/X11/xinit/.Xmodmap
    # merge in defaults and keymaps
    if [ -f $sysresources ]; then
        xrdb -merge $sysresources
    fi
    if [ -f $sysmodmap ]; then
        xmodmap $sysmodmap
    fi
    if [ -f "$userresources" ]; then
        xrdb -merge "$userresources"
    fi
    if [ -f "$usermodmap" ]; then
        xmodmap "$usermodmap"
    fi
    # start some nice programs
    if [ -d /etc/X11/xinit/xinitrc.d ] ; then
     for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do
      [ -x "$f" ] && . "$f"
     done
     unset f
    fi
    $HOME/d/g/gh/scripts/wallpaper_switching.sh &
    $HOME/d/g/gh/scripts/deleting_what_bullshit_programs_create.sh &
    xcompmgr &
    # If you do not want the "anti-tearing" -c -f -n setting just kill the xcompmgr and start xcompmgr & but if u want the vids to play best just completely kill xcompmgr and watch the vids
    exec dwm &
    st 
sudo pacman -S xorg-xinit
sudo pacman -S xorg-xrandr
sudo pacman -S xorg-server
sudo pacman -S xorg-apps xorg-server-common
cd ~/
mkdir -p d/g/gh
cd d/g/gh
git clone https://github.com/jakubhalik/scripts.git
cp .xinitrc ~/.xinitrc
cp zsh_config_without_oh_my_zsh ~/.zshrc
cp .bashrc ~/.bashrc
source ~/.zshrc
szb
u
yu
yay -S ttf-jetbrains-mono
chmod +x ~/.xinitrc
ls -l /usr/bin/X
journalctl -xe
startx
xrandr --output Virtual-1 --mode 1920x1080
sudo pacman -S dash
sudo chsh -s /bin/dash x
zsh
sudo pacman -S zsh-syntax-highlighting
echo "source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" >> ${ZDOTDIR:-$HOME}/.zshrc





1. **Device Naming for NVMe**:
   - NVMe drives are usually named `/dev/nvme0n1`, with partitions named `/dev/nvme0n1p1`, `/dev/nvme0n1p2`, etc.
   - Anywhere in your instructions where you refer to `/dev/nvme0n1p`, replace it with `/dev/nvme0n1`.

2. **fdisk Command for Partitioning**:
   When partitioning with `fdisk` on an NVMe drive, run the following:
   ```
   fdisk /dev/nvme0n1
   ```
   Afterward, create partitions as described in the original instructions, but the partition names will be `/dev/nvme0n1p1`, `/dev/nvme0n1p2`, `/dev/nvme0n1p3`.

3. **Encrypting and Setting up LVM**:
   Use the following when creating LUKS and LVM on an NVMe:
   - For LUKS encryption:
     ```
     cryptsetup luksFormat /dev/nvme0n1p3
     cryptsetup open --type luks /dev/nvme0n1p3 lvm
     ```
   - For LVM setup, continue as usual, with the device `/dev/nvme0n1p3` replacing `/dev/nvme0n1p3`.

4. **Boot and EFI Partition**:
   Similarly, for mounting and formatting partitions:
   - Format the EFI partition as FAT32:
     ```
     mkfs.fat -F32 /dev/nvme0n1p1
     ```
   - Format the root and home partitions as `ext4`:
     ```
     mkfs.ext4 /dev/nvme0n1p2
     mkfs.ext4 /dev/volgroup0/lv_root
     mkfs.ext4 /dev/volgroup0/lv_home
     ```

5. **Mounting Partitions**:
   When mounting the partitions, make sure to refer to the correct NVMe partition names:
   ```
   mount /dev/volgroup0/lv_root /mnt
   mkdir -p /mnt/boot
   mount /dev/nvme0n1p2 /mnt/boot
   mkdir /mnt/home
   mount /dev/volgroup0/lv_home /mnt/home
   ```

6. **GRUB Configuration**:
   When configuring GRUB for an NVMe installation, make sure the `GRUB_CMDLINE_LINUX_DEFAULT` reflects the NVMe drive name:
   ```
   GRUB_CMDLINE_LINUX_DEFAULT="loglevel=7 cryptdevice=/dev/nvme0n1p3:volgroup0"
   ```

7. **UEFI Bootloader Installation**:
   When installing GRUB to an NVMe drive:
   ```
   grub-install --target=x86_64-efi --bootloader-id=grub_uefi --recheck /dev/nvme0n1
   ```

